/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import communication.Communicator;
import domain.CFile;
import domain.Peer;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import packages.Operation;
import packages.Request;
import packages.Response;
import packages.ResponseCode;
import tables.FileTableModel;
import util.ComboFiller;
import util.PeerAcceptor;

/**
 *
 * @author a_ziv
 */
public class MainForm extends javax.swing.JFrame {
    
    private File selectedFile;
    private PeerAcceptor acc;
    private ServerSocket sc;
    private Peer peer;

    /**
     * Creates new form Main
     */
    public MainForm(Peer peer) throws IOException, ClassNotFoundException {
        this.peer = peer;
        initComponents();
        refreshTable();
        refreshComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnRemove = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnDownload = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRemove.setText("Remove File");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose file to download:");

        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        btnSelect.setText("Select file");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jTextField1.setEnabled(false);

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(fileTable);

        btnAdd.setText("Add File");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnStart.setText("Start Sharing");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop Sharing");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnDownload)))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnStart)
                .addGap(69, 69, 69)
                .addComponent(btnStop)
                .addGap(130, 130, 130))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed

            int selectedRow = fileTable.getSelectedRow();
            if (selectedRow != -1) {
                String path = (String) fileTable.getValueAt(selectedRow, 1);
                Request req = new Request(Operation.RemoveFile, new CFile(path, peer.getUsername()));
                    try {
                        Response res = Communicator.getInstance().send(new Socket("localhost", 9009), req);
                        if(res.getRc()==ResponseCode.OK){
                            System.out.println("Uspesno uklonjen fajl");
                        }
                        else{
                            System.out.println("Neuspesno uklanjanje");
                        }
                        refreshTable();
                    } catch (IOException ex) {
                        java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
            }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileChooser.getSelectedFile();
                jTextField1.setText("Selected File: " + selectedFile.getName());
            } else {
                jTextField1.setText("No file selected");
                selectedFile = null; // Reset if user cancels
            }
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        if (acc != null && acc.isAlive()) {
            System.out.println("Peer's ServerSocket is already running.");
        } else {
            for(int port=9010; port<9100; port++){
                try {
                    // Create a new ServerSocket
                    sc = new ServerSocket(port);
                    System.out.println("Peer slusa na portu "+port);

                    // Initialize and start the PeerAcceptor thread
                    acc = new PeerAcceptor(sc);
                    acc.start();
                    
                    String ipAddress ="";
                    try{
                        InetAddress localAddress = InetAddress.getLocalHost();
                        ipAddress = localAddress.getHostAddress();
                    }
                    catch(Exception e){
                        System.out.println("Greska prilikom uzimanja IP adrese");
                    }
                    peer.setIp(ipAddress);
                    peer.setPort(port);
                    Request req = new Request(Operation.UpdateIPPort, peer);
                    try {
                        Response res = Communicator.getInstance().send(new Socket("localhost", 9009), req);
                        if(res.getRc()==ResponseCode.OK){
                            System.out.println("Uspesno updetjtovani ip i port");
                        }
                        else{
                            System.out.println("Neuspesno updejtovanje");
                        }
                    } catch (IOException ex) {
                        java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                    break;
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        if (acc != null) {
            acc.interrupt();
            try {
                // Close the ServerSocket to stop accepting new connections
                if (sc != null && !sc.isClosed()) {
                    sc.close();
                }
                System.out.println("Peer's ServerSocket stopped.");
            } catch (IOException ex) {
                
            }
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(selectedFile!=null){
            String naziv = JOptionPane.showInputDialog(this, "Unesite naziv fajla", "");
            CFile file = new CFile(naziv, selectedFile.toString(), peer.getUsername());
            Request req = new Request(Operation.ShareFile, file);
            try {
                Response res = Communicator.getInstance().send(new Socket("localhost", 9009), req);
                if(res.getRc()==ResponseCode.OK){
                    System.out.println("Uspesno serovan fajl");
                }
                    else{
                        System.out.println("Neuspesno serovanje");
                    }
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            try {
                refreshTable();
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        CFile selectedFile = (CFile) jComboBox1.getSelectedItem();
        try {
            Response res = Communicator.getInstance().send(new Socket("localhost", 9009), new Request(Operation.GetFile, selectedFile));
            Peer p = (Peer)res.getObj();
            Socket socket = new Socket("localhost", p.getPort());
            socket.setSoTimeout(60000); 

            PrintWriter writer = new PrintWriter(socket.getOutputStream());
            writer.println(selectedFile.getId().toString());
            writer.flush();

            BufferedInputStream in = new BufferedInputStream(socket.getInputStream());

            String downloadDir = peer.getUsername() + "_downloads";
            File dir = new File(downloadDir);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            String extension = getFileExtension((String)Communicator.getInstance().send(new Socket("localhost", 9009), new Request(Operation.GetPath, selectedFile.getId())).getObj());
            File file = new File(dir, "downloaded_from_" + p.getUsername() + "_ " + selectedFile.getName() + extension);
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));

            // Read the file from the input stream and write it to the local file
            byte[] buffer = new byte[4096];  // Buffer for data
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) {
                /*for(byte b : buffer) {
                    System.out.print(String.format("%02X ", b));  // Print the byte as hex
                }*/
                out.write(buffer, 0, bytesRead);
            }

            // Close all streams and socket
            out.flush();
            out.close();
            in.close();
            socket.close();

            System.out.println("File downloaded successfully.");
        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDownloadActionPerformed

    private String getFileExtension(String filePath) {
        File file = new File(filePath);
        String fileName = file.getName();
        int dotIndex = fileName.lastIndexOf(".");
        
        // If there's no dot in the file name, return an empty string
        if (dotIndex == -1) {
            return "";
        }
        
        return fileName.substring(dotIndex);  // Return the extension including the dot
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainForm(null).setVisible(true);
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JTable fileTable;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() throws IOException, ClassNotFoundException {
        Response r = Communicator.getInstance().send(new Socket("localhost", 9009), new Request(Operation.GetSharedFiles, peer));
        if(r.getRc()==ResponseCode.OK){
            FileTableModel ftm = new FileTableModel((List<CFile>) r.getObj());
            fileTable.setModel(ftm);
        }
    }

    private void refreshComboBox() {
        new ComboFiller(jComboBox1).start();
    }
}
